import groovy.json.JsonSlurper

plugins {
    id "java"
    id "application"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    implementation files("${starmade_directory}/StarMade.jar")
    implementation fileTree(dir: starmade_directory + "/lib", include: ["*.jar"])
    implementation fileTree(dir: "lib", include: ["*.jar"])
}

compileJava.options.encoding = "UTF-8"

tasks.register("update_json") {
    doLast {
        def modJson = file("src/main/resources/mod.json")
        def modJsonContent = modJson.getText()
        modJsonContent = modJsonContent.replaceAll(/"version":\s*".*"/, "\"version\": \"" + mod_version + "\"")
        modJsonContent = modJsonContent.replaceAll(/"description":\s*".*"/, "\"description\": \"" + mod_description + "\"")
        modJsonContent = modJsonContent.replaceAll(/"starmade_version":\s*".*"/, "\"starmade_version\": \"" + starmade_version + "\"")
        modJsonContent = modJsonContent.replaceAll(/"smd_resource_id":\s*".*"/, "\"smd_resource_id\": \"" + mod_id + "\"")
        modJsonContent = modJsonContent.replaceAll(/"main_class":\s*".*"/, "\"main_class\": \"" + main_class + "\"")
        modJson.write(modJsonContent)
    }
}

jar {
    dependsOn("update_json")
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    destinationDirectory.set(file(starmade_directory + "mods"))
    archiveFileName = mod_name + " - " + mod_version +  ".jar"
    manifest.attributes("Main-Class": main_class)
    from {
        configurations.runtimeClasspath.collect {
            if(!it.getPath().contains("StarMade") && it.getName().endsWith(".jar")) it.isDirectory() ? it : zipTree(it)
            else return null;
        }
    }
}